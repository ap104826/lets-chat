{"version":3,"sources":["Login.js","ApiContext.js","Room.js","messages-helpers.js","Rooms.js","RoomNav.js","App.js","serviceWorker.js","index.js"],"names":["Login","className","onSubmit","e","handleSubmit","type","placeholder","href","Component","React","createContext","users","rooms","messages","addNewRoom","Room","preventDefault","room_id","props","match","params","form","currentTarget","message","value","user","time","Date","parseInt","context","addMessage","roomId","target","this","history","push","messagesForRoom","filter","getMessagesForRoom","map","index","key","name","getHours","getMinutes","id","defaultProps","contextType","ApiContext","Rooms","handleformSubmit","roomName","console","log","addRoom","required","htmlFor","room","to","RoomNav","find","getRoomFromRoomId","App","state","handleAddMessage","setState","handleAddNewRoom","length","bind","Provider","path","render","exact","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d1e6490e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Login extends Component {\n    render() {\n        return (\n            <div>\n                <title>Login </title>\n                <div className=\"sign-up-form\">\n\n                    <h1> Login</h1>\n                    <form onSubmit={(e) => this.handleSubmit(e)}>\n                        <input type=\"email\" className=\"input_email\" placeholder=\"Email\" />\n                        <input type=\"password\" className=\"input_password\" placeholder=\"Password\" />\n                        <button type=\"button\" className=\"signup_btn\">Sign up</button>\n                        <hr />\n                        <p>Do you have an account ? <a href=\"#\">Sign in</a></p>\n                    </form>\n                </div>\n\n            </div>\n\n        )\n    }\n}","import React from 'react'\n\nexport default React.createContext({\n    users: [],\n    rooms: [],\n    messages: [],\n    addNewRoom: () => { },\n})","import React, { Component } from 'react';\nimport ApiContext from './ApiContext'\nimport { getMessagesForRoom } from './messages-helpers'\n\n\nexport default class Room extends Component {\n    static defaultProps = {\n        match: {\n            params: {}\n        }\n    }\n    static contextType = ApiContext\n\n    roomSelected(e) {\n        const roomId = e.target.value\n        if (roomId = 'all') {\n            this.props.history.push('/')\n            return\n        }\n        this.props.history.push(`/room/${roomId}`)\n    }\n\n\n    handleSubmit = e => {\n        e.preventDefault()\n        const { room_id } = this.props.match.params\n        const form = e.currentTarget\n        const messageName = form['message-to-send'].value\n        const message = {\n            message: messageName,\n            user: 'Nachiket',\n            time: new Date(),\n            room_id: parseInt(room_id)\n        }\n\n        this.context.addMessage(message)\n        form['message-to-send'].value = ''\n    }\n\n    render() {\n\n        const { room_id } = this.props.match.params\n        const { users = [], rooms = [], messages = [] } = this.context\n        const messagesForRoom = getMessagesForRoom(messages, parseInt(room_id))\n\n        return (\n            <div className=\"chat_container\">\n                <div className=\"main_chat\">\n                    <div className=\"chat_nav\">\n                        <div className=\"chat_users\">\n                            <h2>Users</h2>\n                            <ul>\n                                {users.map((user, index) => <li key={index}>{user.name}</li>)}\n                            </ul>\n                        </div>\n\n                    </div>\n\n\n                    <div className=\"chat_messages\">\n                        <div className=\"chat-history\">\n                            <ul>\n                                {messagesForRoom.map((message, index) => <li key={index}>\n                                    <div className=\"message-data align-right\">\n                                        <span className=\"message-data-time\">{message.time.getHours()}:{message.time.getMinutes()}</span> &nbsp; &nbsp;\n              <span className=\"message-data-name\">{message.user}</span>\n\n                                    </div>\n                                    <div className=\"message other-message float-right\">\n                                        {message.message}\n                                    </div>\n                                </li>)}\n\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n                <form className=\"chat_message\" onSubmit={(e) => this.handleSubmit(e)}>\n                    <input name=\"message-to-send\" className=\"message_input\" id=\"message-to-send\" placeholder=\"Type your message\" />\n                    <button className=\"message_send\">Send</button>\n                </form>\n\n            </div>\n        )\n\n    }\n}\n","export const getMessagesForRoom = (messages = [], room_id) => (\n    (!room_id)\n        ? messages\n        : messages.filter(message => message.room_id === room_id)\n)\n\n//given rooms and a roomId return the room matching the roomId\nexport const getRoomFromRoomId = (rooms = [], room_id) => (\n    rooms.find(room => room.id === room_id)\n)","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport rooms from './Rooms'\nimport ApiContext from './ApiContext'\nimport './Room.css'\n\n\nexport default class Rooms extends Component {\n\n    static contextType = ApiContext\n    handleformSubmit = e => {\n        e.preventDefault()\n        const form = e.currentTarget\n        const roomName = form['room-name'].value\n        console.log(roomName)\n        this.context.addRoom(roomName)\n    }\n\n    render() {\n        const { rooms = [] } = this.context\n\n        return (\n\n            <div className=\"room_form\">\n                <form onSubmit={(e) => this.handleformSubmit(e)}>\n\n                    <input type=\"text\" className=\"input_box\" required name='room-name' placeholder=\"Type a new Room\" />\n\n                    <button type=\"submit\" className=\"signup-btn\">Create</button>\n\n                </form>\n                <hr />\n\n                <label htmlFor=\"rooms\">Choose a Room:</label>\n                <br></br>\n                <ul>\n                    {rooms.map(room =>\n                        <li key={room.id}>\n                            <NavLink\n                                to={`/rooms/${room.id}`}\n                            >\n                                {room.name}\n\n                            </NavLink>\n                        </li>)}\n                </ul>\n            </div >\n        )\n\n    }\n}\n","import React, { Component } from 'react';\nimport ApiContext from './ApiContext'\nimport Room from './Room';\nimport Rooms from './Rooms';\nimport { NavLink } from 'react-router-dom';\n\nimport { getRoomFromRoomId } from './messages-helpers'\n\nexport default class RoomNav extends Component {\n    static contextType = ApiContext\n    render() {\n        //getting the room id from the url\n        const { room_id } = this.props.match.params\n        //reading the room from the context\n        const { rooms = [] } = this.context\n        //getting a room given its roomId\n        const room = getRoomFromRoomId(rooms, parseInt(room_id))\n        //use nav links to link to the home page\n        return (<>\n            <h2>{room.name}</h2>\n            <div>\n                <NavLink to=\"/\">Leave Room</NavLink>\n                <br />\n                <NavLink to=\"/\">Create Room</NavLink>\n            </div>\n        </>)\n    }\n\n}","import React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport Login from './Login'\nimport Room from './Room'\nimport Rooms from './Rooms'\nimport './App.css'\nimport ApiContext from './ApiContext'\nimport RoomNav from './RoomNav'\n\n\n\nclass App extends Component {\n  state = {\n    users: [{\n      name: 'Arpita'\n    }, {\n      name: 'Nachiket'\n    }],\n    rooms: [{\n      name: 'Cooking',\n      id: 1\n    }, {\n      name: 'Travel',\n      id: 2\n    }],\n    messages: [{\n      message: 'Hi Arpita, how are you? How is the project coming along?',\n      time: new Date(),\n      user: 'Nachiket',\n      room_id: 1\n    }, {\n      message: 'Are we meeting today? Project has been already finished and I have results to show you.',\n      time: new Date(),\n      user: 'Arpita',\n      room_id: 1\n    }, {\n      time: new Date(),\n      user: 'Nachiket',\n      message: 'Well I am not sure. The rest of the team is not here yet. Maybe in an hour or so? Have you faced any problems at the last phase of the project?',\n      room_id: 2\n    }, {\n      time: new Date(),\n      user: 'Arpita',\n      message: 'Actually everything was fine. I am very excited to show this to our team.',\n      room_id: 2\n    }]\n\n  }\n  constructor(props) {\n    super(props)\n    this.handleAddNewRoom = this.handleAddNewRoom.bind(this)\n  }\n\n\n  handleAddMessage = (message) => {\n    this.setState({\n      messages: [\n        ...this.state.messages,\n        message\n      ]\n    })\n  }\n\n  handleAddNewRoom = roomName => {\n    console.log(roomName)\n    this.setState({\n      rooms: [\n        ...this.state.rooms,\n        { name: roomName, id: this.state.rooms.length + 1 }\n      ]\n    })\n  }\n\n\n  render() {\n    const value = {\n      addMessage: this.handleAddMessage,\n      addRoom: this.handleAddNewRoom,\n      users: this.state.users,\n      rooms: this.state.rooms,\n      messages: this.state.messages,\n    }\n\n\n    return (\n      <ApiContext.Provider value={value}>\n        <div className=\"App\">\n          <header className=\"App_header\">\n            <h1>LetsChat</h1>\n\n            <Route\n              path='/rooms/:room_id'\n              render={(props) => <RoomNav {...props} />}\n            />\n\n\n          </header>\n          <Route\n            exact\n            path='/rooms/:room_id'\n            render={(props) => <Room {...props} />}\n\n          />\n          <Route\n            path='/login'\n            component={Login}\n          />\n          <Route\n            exact\n            path='/'\n            component={Rooms}\n          />\n\n        </div>\n      </ApiContext.Provider>\n    )\n\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}